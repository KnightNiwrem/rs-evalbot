# timeout in seconds for each invocation
timeout = 20
# number of threads to process evaluation requests
eval_threads = 4

[[languages]]
# name>
name = "rs"
# path to binary
binary_path = "/usr/local/lib/evalbot/playpen"
# arguments to binary
binary_args = ["/opt/sandbox", "--mount-proc", "--user=eval", "--devices=/dev/urandom:r,/dev/null:rw", "--memory-limit=128",
    "--syscalls-file=rust_syscalls",
    "--", "/usr/bin/dash",
    "-c", '''
set -o errexit
cat <<EOF | rustc - -o ./out "$@" 2>&1
$(cat)
static VERSION: &'static str = "$(rustc -V | head -1 | tr -d '\n')";
EOF
exec ./out 2>&1
''', "evaluate", "-C", "opt-level=2", "-A", "warnings"]
# whether this is a daemon/repl (persistent) or compile-and-run (not)
persistent = false
# string to prepend to code, optional
code_before = '''
#![feature(core_intrinsics)]
macro_rules! type_of {
    ($x:expr) => {
        {
            fn type_of<T>(x: &T) -> &'static str {
                unsafe { std::intrinsics::type_name::<T>() }
            }
            type_of(&$x)
        }
    }
}
fn show<T: std::fmt::Debug>(e: T) { println!("{:?}", e) }
fn main() {
    show({
'''
# string to append to code, optional
code_after = '''

    });
}'''

[[languages]]
name = "rs!"
binary_path = "/usr/local/lib/evalbot/playpen"
binary_args = ["/opt/sandbox", "--mount-proc", "--user=eval", "--devices=/dev/urandom:r,/dev/null:rw", "--memory-limit=128",
    "--syscalls-file=rust_syscalls",
    "--", "/usr/bin/dash",
    "-c", '''
set -o errexit
rustc - -o ./out "$@" 2>&1
exec ./out 2>&1
''', "evaluate", "-C", "opt-level=2"]
persistent = false

[[languages]]
name = "gcc"
binary_path = "/usr/local/lib/evalbot/playpen"
binary_args = ["/opt/sandbox", "--mount-proc", "--user=eval", "--devices=/dev/urandom:r,/dev/null:rw", "--memory-limit=128",
    "--syscalls-file=rust_syscalls",
    "--", "/usr/bin/dash",
    "-c", '''
set -o errexit
echo -n "#include <stdio.h>\n$(cat)" | gcc -w -x c - -O3 -o out 2>&1
exec ./out 2>&1
''']
persistent = false

[[languages]]
name = "c"
binary_path = "/usr/local/lib/evalbot/playpen"
binary_args = ["/opt/sandbox", "--mount-proc", "--user=eval", "--devices=/dev/urandom:r,/dev/null:rw", "--memory-limit=128",
    "--syscalls-file=rust_syscalls",
    "--", "/usr/bin/dash",
    "-c", '''
set -o errexit
echo -n "#include <stdio.h>\n$(cat)" | clang -w -std=c11 -x c - -O3 -o out 2>&1
exec ./out 2>&1
''']
persistent = false

[[languages]]
name = "g++"
binary_path = "/usr/local/lib/evalbot/playpen"
binary_args = ["/opt/sandbox", "--mount-proc", "--user=eval", "--devices=/dev/urandom:r,/dev/null:rw", "--memory-limit=128",
    "--syscalls-file=rust_syscalls",
    "--", "/usr/bin/dash",
    "-c", '''
set -o errexit
echo -n "#include <iostream>\n$(cat)" | g++ -w -x c++ - -O3 -o out 2>&1
exec ./out 2>&1
''']
persistent = false

[[languages]]
name = "c++"
binary_path = "/usr/local/lib/evalbot/playpen"
binary_args = ["/opt/sandbox", "--mount-proc", "--user=eval", "--devices=/dev/urandom:r,/dev/null:rw", "--memory-limit=128",
    "--syscalls-file=rust_syscalls",
    "--", "/usr/bin/dash",
    "-c", '''
set -o errexit
echo -n "#include <iostream>\n$(cat)" | clang++ -w -std=c++11 -x c++ - -O3 -o out 2>&1
exec ./out 2>&1
''']
persistent = false

[[languages]]
name = "cs"
binary_path = "/usr/local/lib/evalbot/playpen"
binary_args = ["/opt/sandbox", "--mount-proc", "--user=eval", "--devices=/dev/urandom:r,/dev/null:rw", "--memory-limit=128",
    "--syscalls-file=mono_syscalls",
    "--", "/usr/bin/mono", "/usr/local/lib/evalbot/cseval.exe"]
persistent = true

[[languages]]
name = "py"
syscalls_path = "python_syscalls"
binary_path = "/usr/local/lib/evalbot/playpen"
binary_args = ["/opt/sandbox", "--mount-proc", "--user=eval", "--devices=/dev/urandom:r,/dev/null:rw", "--memory-limit=128", "-L",
    "--syscalls-file=python_syscalls",
    "--", "/usr/bin/python", "/usr/local/lib/evalbot/pyeval.py"]
persistent = true

[[languages]]
name = "fs"
binary_path = "/usr/local/lib/evalbot/playpen"
binary_args = ["/opt/sandbox", "--mount-proc", "--user=eval", "--devices=/dev/urandom:r,/dev/null:rw", "--memory-limit=128",
    "--syscalls-file=mono_syscalls",
    "--", "/usr/bin/mono", "/usr/local/lib/evalbot/fseval/fseval.exe"]
persistent = true

[[languages]]
name = "js"
binary_path = "/usr/local/lib/evalbot/playpen"
binary_args = ["/opt/sandbox", "--mount-proc", "--user=eval", "--devices=/dev/urandom:r,/dev/null:rw", "--memory-limit=128",
    "--syscalls-file=node_syscalls",
    "--", "/usr/bin/node", "/usr/local/lib/evalbot/jseval.js"]
persistent = true

#[[languages]]
#name = "sc"
#binary_path = "/usr/local/lib/evalbot/playpen"
#binary_args = ["/opt/sandbox", "--mount-proc", "--user=eval", "--devices=/dev/urandom:r,/dev/null:rw", "--memory-limit=128",
#   "--syscalls-file=scala_syscalls",
#   "--", "/usr/lib/jvm/default-runtime/bin/java",
#   "-Xms32M", "-Xmx384M",
#   "-Xbootclasspath/a:/usr/share/scala/lib/jline.jar:/usr/share/scala/lib/scala-actors.jar:/usr/share/scala/lib/scala-compiler.jar:/usr/share/scala/lib/scala-continuations-library_2.11-1.0.2.jar:/usr/share/scala/lib/scala-continuations-plugin_2.11.6-1.0.2.jar:/usr/share/scala/lib/scala-library.jar:/usr/share/scala/lib/scala-parser-combinators_2.11-1.0.4.jar:/usr/share/scala/lib/scala-partest-extras.jar:/usr/share/scala/lib/scala-partest-javaagent.jar:/usr/share/scala/lib/scalap.jar:/usr/share/scala/lib/scala-reflect.jar:/usr/share/scala/lib/scala-repl-jline-embedded.jar:/usr/share/scala/lib/scala-repl-jline.jar:/usr/share/scala/lib/scala-swing_2.11-1.0.2.jar:/usr/share/scala/lib/scala-xml_2.11-1.0.4.jar",
#   '-classpath', '""', "-Dscala.home=/usr/share/scala", "-Dscala.usejavacp=true", "-jar", "/usr/local/lib/evalbot/scalaeval_2.11-1.0.jar"]
#persistent = true
