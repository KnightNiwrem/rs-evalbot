# timeout in seconds for each invocation
playpen_timeout = 20
# number of threads to process evaluation requests
eval_threads = 4
# path to your sandbox, relative to where you start evalbot or absolute
sandbox_dir = "sandbox"
# playpen arguments
playpen_args = ["--mount-proc",
                "--user=eval",
                "--devices=/dev/urandom:r,/dev/null:w",
                "--memory-limit=128",
                "--bind=/usr", "--bind=/var"]

[[languages]]
# rs>code
name = "rs"
# path to syscalls file, relative or absolute like sandbox_dir
syscalls_path = "rust_syscalls"
# absolute path to binary IN THE SANDBOX
binary_path = "/usr/bin/dash"
# arguments to pass
binary_args = ["-c", '''
set -o errexit
cat <<EOF | rustc - -o ./out "$@" 2>&1
$(cat)
static VERSION: &'static str = "$(rustc -V | head -1 | tr -d '\n')";
EOF
exec ./out 2>&1
''', "evaluate", "-C", "opt-level=2", "-A", "warnings"]
# whether this is a daemon/repl (persistent) or compile-and-run (not)
persistent = false
# optional, string to prepend before input
code_before = '''
#![feature(core_intrinsics)]
macro_rules! type_of {
    ($x:expr) => {
        {
            fn type_of<T>(x: &T) -> &'static str {
                unsafe { std::intrinsics::type_name::<T>() }
            }
            type_of(&$x)
        }
    }
}
fn show<T: std::fmt::Debug>(e: T) { println!("{:?}", e) }
fn main() {
    show({'''
# optional, string to append after input
code_after = '''
    });
}'''

[[languages]]
name = "rs!"
syscalls_path = "rust_syscalls"
binary_path = "/usr/bin/dash"
binary_args = ["-c", '''
set -o errexit
rustc - -o ./out "$@" 2>&1
exec ./out 2>&1
''', "evaluate", "-C", "opt-level=2"]
persistent = false

[[languages]]
name = "gcc"
syscalls_path = "rust_syscalls"
binary_path = "/usr/bin/dash"
binary_args = ["-c", '''
set -o errexit
echo -n "#include <stdio.h>\n$(cat)" | gcc -w -x c - -O3 -o out 2>&1
exec ./out 2>&1
''']
persistent = false

[[languages]]
name = "c"
syscalls_path = "rust_syscalls"
binary_path = "/usr/bin/dash"
binary_args = ["-c", '''
set -o errexit
echo -n "#include <stdio.h>\n$(cat)" | clang -w -pedantic-errors -std=c11 -x c - -O3 -o out 2>&1
exec ./out 2>&1
''']
persistent = false

[[languages]]
name = "g++"
syscalls_path = "rust_syscalls"
binary_path = "/usr/bin/dash"
binary_args = ["-c", '''
set -o errexit
echo -n "#include <iostream>\n$(cat)" | g++ -w -x c++ - -O3 -o out 2>&1
exec ./out 2>&1
''']
persistent = false

[[languages]]
name = "c++"
syscalls_path = "rust_syscalls"
binary_path = "/usr/bin/dash"
binary_args = ["-c", '''
set -o errexit
echo -n "#include <iostream>\n$(cat)" | clang++ -w -pedantic-errors -std=c++11 -x c++ - -O3 -o out 2>&1
exec ./out 2>&1
''']
persistent = false

[[languages]]
name = "cs"
syscalls_path = "mono_syscalls"
binary_path = "/usr/bin/mono"
binary_args = ["/usr/local/bin/cseval.exe"]
persistent = true

[[languages]]
name = "py"
syscalls_path = "python_syscalls"
binary_path = "/usr/bin/python"
binary_args = ["/usr/local/bin/pyeval.py"]
persistent = true

[[languages]]
name = "fs"
syscalls_path = "mono_syscalls"
binary_path = "/usr/bin/mono"
binary_args = ["/usr/local/bin/fseval.exe"]
persistent = true

[[languages]]
name = "js"
syscalls_path = "node_syscalls"
binary_path = "/usr/bin/node"
binary_args = ["/usr/local/bin/jseval.js"]
persistent = true

[[languages]]
name = "sc"
syscalls_path = "scala_syscalls"
binary_path = "/usr/lib/jvm/default-runtime/bin/java"
binary_args = ["-Xms32M", "-Xmx384M",
"-Xbootclasspath/a:/usr/share/scala/lib/jline.jar:/usr/share/scala/lib/scala-actors.jar:/usr/share/scala/lib/scala-compiler.jar:/usr/share/scala/lib/scala-continuations-library_2.11-1.0.2.jar:/usr/share/scala/lib/scala-continuations-plugin_2.11.6-1.0.2.jar:/usr/share/scala/lib/scala-library.jar:/usr/share/scala/lib/scala-parser-combinators_2.11-1.0.4.jar:/usr/share/scala/lib/scala-partest-extras.jar:/usr/share/scala/lib/scala-partest-javaagent.jar:/usr/share/scala/lib/scalap.jar:/usr/share/scala/lib/scala-reflect.jar:/usr/share/scala/lib/scala-repl-jline-embedded.jar:/usr/share/scala/lib/scala-repl-jline.jar:/usr/share/scala/lib/scala-swing_2.11-1.0.2.jar:/usr/share/scala/lib/scala-xml_2.11-1.0.4.jar",
'-classpath', '""', "-Dscala.home=/usr/share/scala", "-Dscala.usejavacp=true", "-jar", "/usr/local/bin/scalaeval_2.11-1.0.jar"]
persistent = true
